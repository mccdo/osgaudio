#summary Installation instructions for osgAudio

= Introduction =

osgAudio requires [http://www.openscenegraph.org OpenSceneGraph]

osgAudio needs one audio subsystem compiled in. Currently [http://connect.creativelabs.com/openal/default.aspx OpenAL] and [http://www.fmod.org/ FMOD] are supported.

= Details =

== Dependencies ==

OpenAL subsystem:
  * [http://connect.creativelabs.com/openal/default.aspx OpenAL]
   * Portable low level sound library. Similar to OpenGL.
   * OpenAL also depends on !OggVorbis.
  * [http://connect.creativelabs.com/openal/Downloads/Forms/AllItems.aspx freeALUT]
   * !RootFolder=/openal/Downloads/ALUT
   * Utility library for OpenAL
  * [http://www.vorbis.com/ OggVorbis]
   * Portable library for reading/writing ogg/vorbis files, which are similar to MP3 in quality and compression, but FREE.
   * Both the libogg and libvorbis libraries are required.

== Download ==

To build osgAudio you first need to download and install !OpenSceneGraph as well as the dependencies for your chosen audio subsystem.

== Cross-platform build (using CMake) ==

These instructions should work for a large range of platforms:
  * Download and unzip or install [http://www.cmake.org CMake].
  * Follow CMake guides to prepare project files (Such as makefiles, MS-VisualC++ project files...). Basically :
   * Run the GUI or the command line to configure
   * Change cache values (Using the GUI or in CMakeCache.txt) according to what is necessary
   * Repeat until everything is okay
   * Generate project files
  * Compile using your favorite compiler/IDE.

=== CMake settings ===
  * All the boolean user-controlled options are prefixed with !0_ to force CMake to sort them to the top of the list. One of either 0_ENABLE_SUBSYSTEM_OPENAL or 0_ENABLE_SUBSYSTEM_FMOD should be checked, but not both.
  * 0_BUILD_EXAMPLES_OSGAUDIO builds the high-level OSG-integrated demo examples and is recommended.
  * 0_BUILD_EXAMPLES_OSGAUDIO_LOWLEVEL builds the low-level non-OSG-dependent examples that mimic the original OpenAL++ low-level examples, but use the osgAudio abstraction layer. Recommended.
  * 0_BUILD_EXAMPLES_OPENALPP builds the original low-level non-OSG-dependent examples that use the OpenAL++ API directly and not the osgAudio abstraction layer. These will only build if you compile with the OpenAL++ backend enabled. Recommended if you build with OpenAL++.

== Unimplemented ==
Audio recording, live audio input streams, and grouped audio sources are unimplemented in FMOD. Some
more esoteric settings (such as reverb) may not be implemented in FMOD if a mapping between the
original functionality and FMOD's API couldn't be found.

== Testing ==
If you are building for OpenAL++, first test the OpenAL++ low-level examples (example_oalpp_*).
If you are using FMOD, or if that step passes, then test the osgAudio low-level example/demo programs (example_osgaudiolow_*). When those run ok, try the osgAudio high-level OSG-integrated examples (example_osgaudio_*).

== Other platforms == 

osgAudio has not been tested on other platforms than Linux and Windows. If you get it to work on another platform, contact me with information on how you did, and I'll add information to this file. Also be sure to tell me about any necessary changes to get it to work.